(def x (atom {:searchInput ""}))
(println x)
(get @x :searchInput)
(get x :searchInput)
(get @x :searchInput)
(def x (atom {:searchInput "asdasd"}))
(get @x :searchInput)
(swap! x (
assoc 
{
:searchInput "asdasdasd"
}
x
))
(swap!
x
(assoc @x :searchInput "asdasd")
)
(get :searchInput @x)
(x)
x
@x
(:searchInput @x)
(get :searchInput @x)
(def x (atom {:searchInput "asdasd"}))
(get :searchInput @x)
(@x :searchInput)
cls
(@x :searchInput)
(swap! @x :searchInput "newinput")
(swap! x (assoc @x :searchInput "newinput"))
(@x :searchInput)
(x :searchInput)
(swap! x (assoc @x :searchInput "newinput"))
(x :searchInput)
(@x :searchInput)
(x)
(println x)
(println @\x)
(println @x)
(println (keys @x))
(def a {:a  "1212"})
(assoc a :a "322323")
(reset! x (assoc @x :searchInput "newinput"))
(println x)
(doc for)
(for [x [1 2 3 4]] (println x))
(for [x [1 2 3 4]] (println x)[x])
(for [x [1 2 3 4]] (println x) ])
(for [x [1 2 3 4]] (println x) [x])
(for [x [1 2 3 4]] (println x))
`(range 1000)
(for [x (range 10) ] (print x
))
(for [x (range 10) ] (print (+ x " ")))\
)
(for [x (range 10) ] (print (+ x " ")))
(for [x (range 10) ] (print (str x " ")))
(for [x (range 10) ] (print (str x " "))[x])
(for [x (range 10) ] (print (str x " "))[x 1])
(for [x (range 10) ] (print (str x " "))([1]))
(for [x (range 10) ] (print (str x " ")))
(def x {:a (range 10)})
(x :a)
(def x {:a (fn () (range 10)})
(def x {:a (fn () (range 10))})
(def x {:a fn () (range 10)})
(def x {:a (fn [] (range 10))})
(x :a)
(def x {:a fn [] (range 10)})
(x :a)
~@(x :a)
((x :a))
(def x {:a (fn [] (range 10))})
((x :a))
(x :a)
(def x {:a (#(_ (range 10)))})
(def x {:a (#(_ _ (range 10)))})
(def x {:a (#(range 10))})
(x :a)
(def x {:a (fn [] (range 10))})
(x :a)
#(range 10)
(#(range 10))
(fn [] (range 10))
fn [] (range 10)
(map (fn [x] {:name (str "Name" x)}) (range 10))
(doc let)
(let 
[x 12]
(map (fn [_] {:name "dsfsdf"}) (range 10))
)
(let 
[x (+ 2131 1231)]
(map (fn [_] {:name "dsfsdf"}) (range 10))
)
(map (fn [_] {:name (str "dsfsdf" x)}) (range 10))
x
(let 
[x (+ 2131 1231)]
(map (fn [_] {:name (str "dsfsdf" x)}) (range 10))
)
(def x '())
(when (not= (empty? x)) '("dsfsd"))
(when (empty? x) '("dsfsd"))
(def x '("23423423"))
(when (empty? x) '("dsfsd"))
(when (empty? x) '("dsfsd") :else x)
(doc when)
(empty? x)
(when (empty? x) '("dsfsd"))
(if (empty? x) '("dsfsd") x)
(println  1 23)
(conj '(1 2 3 ) '(4,5,6)
)
(conj '(1 2 3 ) '(4,5,6)
)
(identity)
(identity 1)
(identity 2)
(identity 3)
(contains?  "SAdf", "sA")
(contains?  "SAdf" "sA")
(contains? "SAdf" "sA")
(includes?  "SAdf" "sA")
(clojure.string/includes?  "SAdf" "sA")
(enumarate [1,2,3])
(enumerate [1,2,3])
(enumurate [1,2,3])
(doc enum)
(doc enumurate)
(doc enumarate)
(doc enumerate)
(enum [1,2])
(map-indexed [1,2])
(map-indexed #(x) [1,2])
(map-indexed x [1,2])
(map-indexed [1,2])
(map (fn [x] [x]) (map-indexed [1,2]))
(require '[shadow.cljs.devtools.server :as server])
(server/start!)
(require '[shadow.cljs.devtools.api :as shadow])
(doc shadow)
(doc shadow/repl)
(shadow/repl prod)
(shadow/repl app)
(doc shadow/repl)
(shadow/repl :prod)
(shadow/app)
(doc shadow/app)
( shadow)
(doc shadow/repl)
(shadow/repl :prod)
(shadow.cljs.devtools.server/start!)
(require '(shadow.cljs.devtools.server :as server!)
(require '[shadow.cljs.devtools.server :as server])
(server/start!)_
(shadow/repl :prod)
(doc shadow/repl)
(shadow/repl :prod)
(println app-state)
(println dev-app-state)
(require '[ui.db :refer [dev-app-state]])
(shadow/repl
:prod)
(require '[ui.db :refer [dev-app-state]])
(dev-app-state)
(println @dev-app-state)
(println (@dev-app-state :searchInput))
(require '[ui.views.usercard :refer [user-card]])
(def u1 (first (@dev-app-state :usersList)))
(println u1)
(user-card {:user u1})
(require '[ui.views.usercard :refer [user-card]])
(require '[ui.db :refer [dev-app-state]])_
(require '[ui.db :refer [dev-app-state]])
(ns shadow.user)
(require '[ui.db :refer [dev-app-state]])
(require '[shadow.cljs.devtools.server :as server])
(server/start!)
(require '[ui.db :refer [dev-app-state]])
(require '[shadow.cljs.devtools.server :as server])
(server/start!)
(require '[ui.db :refer [dev-app-state]])
(shadow/repl :prod)
(server/stop!)
(require '[ui.db :refer [dev-app-state]])
(server/stop!)
(require '[shadow.cljs.devtools.server :as server])
(server/stop!)
(require '[ui.db :refer [dev-app-state]])
(ns
)
(ns ui.db)
(println dev-app-state)
(ns shadow.user)
(require '[ui.db :refer [dev-app-state]])
(require '[ui.app :refer [initApp]])
(shadow/repl :prod)
(doc shadow/repl)
(require '[ui.db :refer [dev-app-state]])
(println dev-app-state)
(println @dev-app-state)
(doc shadow/repl :prod)
(ns shadow.user)
which
(doc shadow/repl :prod)
(shadow/repl :prod)
(ns shadow.user)
(shadow/repl :prod)
(doc shadow/repl)
(require '[shadow.cljs.devtools.api :as shadow])
(shadow/repl :prod)
(doc shadow/repl)
(shadow/repl :prod)
(require '[ui.db :refer [dev-app-state]])
(println @dev-app-state)
(println (@dev-app-state :searchInput))
(println "sadas")
(println dev-app-state)
(require '[ui.db :refer [dev-app-state]])
(println dev-app-state)
dev-app-state
(ns ui.db)
dev-app-state
(@dev-app-state :searchInput)
